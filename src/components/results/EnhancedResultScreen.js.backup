import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate } from 'react-router-dom'; // useNavigateをインポート追加
import ResultSummary from './ResultSummary';
import QuickConsultationForm from './QuickConsultationForm';
import { trackContactStart, trackRestart, trackShare } from '../../utils/analytics';
import { getTypeData, getTypeCodeExplanation } from '../../data/typeDescriptions';
import { Chart as ChartJS, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from 'chart.js';
import { Radar } from 'react-chartjs-2';
import AnimalIcon from '../AnimalIcon';   // ★←追加

// Chart.jsの設定
ChartJS.register(RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend);

// レーダーチャートコンポーネント
const TypeRadarChart = ({ axisScores }) => {
  // 安全なスコア値を取得（nullやundefinedの場合はデフォルト値を使用）
  const safeScores = axisScores || {
    specialist: 0,
    innovative: 0,
    human: 0,
    analytical: 0
  };

  // チャートデータの準備（分かりやすいラベルに変更）
  const data = {
    labels: ['専門性を極める', '新しいことに挑戦', '人とのつながり', 'しっかり分析'],
    datasets: [
      {
        label: 'あなたのタイプ',
        data: [
          // -1〜1の値を0〜100にスケール変換
          (safeScores.specialist + 1) * 50,
          (safeScores.innovative + 1) * 50,
          (safeScores.human + 1) * 50,
          (safeScores.analytical + 1) * 50
        ],
        backgroundColor: 'rgba(26, 108, 191, 0.2)',
        borderColor: 'rgba(26, 108, 191, 1)',
        borderWidth: 2,
        pointBackgroundColor: 'rgba(26, 108, 191, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(26, 108, 191, 1)'
      }
    ]
  };

  // チャートオプション
  const options = {
    scales: {
      r: {
        min: 0,
        max: 100,
        beginAtZero: true,
        angleLines: {
          color: 'rgba(0, 0, 0, 0.1)'
        },
        grid: {
          color: 'rgba(0, 0, 0, 0.1)'
        },
        pointLabels: {
          font: {
            size: 14,
            weight: 'bold'
          },
          color: '#4A5568'
        },
        ticks: {
          display: false
        }
      }
    },
    plugins: {
      legend: {
        display: false
      },
      tooltip: {
        backgroundColor: 'rgba(0, 0, 0, 0.7)',
        titleFont: {
          size: 14
        },
        bodyFont: {
          size: 12
        },
        callbacks: {
          label: (context) => {
            return `スコア: ${context.raw.toFixed(0)}%`;
          }
        }
      }
    },
    maintainAspectRatio: true
  };

  return (
    <div style={{ 
      width: '100%', 
      maxWidth: '240px', 
      margin: '0 auto',
      padding: '10px'
    }}>
      <Radar data={data} options={options} />
    </div>
  );
};

// シェア機能コンポーネント
const ShareSection = ({ resultType, profession }) => {
  const [copied, setCopied] = useState(false);
  
  const shareData = {
    title: '医療キャリア診断 結果',
    text: `私は ${resultType} タイプでした！ MediMatch で診断してみませんか？`,
    url: window.location.href
  };
  
  const handleCopyLink = () => {
    navigator.clipboard.writeText(`${shareData.text} ${shareData.url}`)
      .then(() => {
        setCopied(true);
        // シェアイベントのトラッキング
        trackShare(resultType, 'copy');
        setTimeout(() => setCopied(false), 2000);
      })
      .catch(() => alert('リンクのコピーに失敗しました'));
  };
  
  const handleShare = (method) => {
    // シェアイベントのトラッキング
    trackShare(resultType, method);
    
    if (navigator.share && method === 'native') {
      navigator.share(shareData).catch(console.error);
    } else {
      handleCopyLink();
    }
  };
  
  return (
    <div>
      <h3 style={{ fontSize: '20px', fontWeight: '600', marginBottom: '20px', color: '#2D3748' }}>
        診断結果をシェアする
      </h3>
      
      <div style={{
        backgroundColor: '#F7FAFC',
        borderRadius: '12px',
        padding: '20px',
        marginBottom: '24px',
        border: '1px solid #E2E8F0'
      }}>
        <p style={{ marginBottom: '16px', fontSize: '15px', color: '#4A5568' }}>
          あなたの診断結果を友達や同僚とシェアして、お互いのタイプを比較してみましょう！
        </p>
        
        <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
          <button
            onClick={() => handleShare('native')}
            style={{
              backgroundColor: '#4299E1',
              color: 'white',
              padding: '12px 24px',
              borderRadius: '8px',
              border: 'none',
              fontSize: '16px',
              fontWeight: '600',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '8px'
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <circle cx="18" cy="5" r="3" />
              <circle cx="6" cy="12" r="3" />
              <circle cx="18" cy="19" r="3" />
              <line x1="8.59" y1="13.51" x2="15.42" y2="17.49" />
              <line x1="15.41" y1="6.51" x2="8.59" y2="10.49" />
            </svg>
            結果をシェアする
          </button>
          
          <button
            onClick={handleCopyLink}
            style={{
              backgroundColor: 'white',
              color: '#4A5568',
              padding: '12px 24px',
              borderRadius: '8px',
              border: '1px solid #CBD5E0',
              fontSize: '16px',
              fontWeight: '600',
              cursor: 'pointer',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '8px'
            }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
            </svg>
            {copied ? 'コピーしました！' : 'リンクをコピー'}
          </button>
        </div>
      </div>
      
      {/* SNSシェアボタン */}
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        gap: '16px',
        marginBottom: '24px'
      }}>
        <a href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(
          `私は ${resultType} タイプでした！ #MediMatch診断`
        )}&url=${encodeURIComponent(window.location.href)}`}
          target="_blank"
          rel="noopener noreferrer"
          onClick={() => trackShare(resultType, 'twitter')}
          style={{
            backgroundColor: '#1DA1F2',
            color: 'white',
            width: '50px',
            height: '50px',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            textDecoration: 'none',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
          }}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path>
          </svg>
        </a>
        
        <a href={`https://social-plugins.line.me/lineit/share?url=${encodeURIComponent(window.location.href)}`}
          target="_blank"
          rel="noopener noreferrer"
          onClick={() => trackShare(resultType, 'line')}
          style={{
            backgroundColor: '#06C755',
            color: 'white',
            width: '50px',
            height: '50px',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            textDecoration: 'none',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
          }}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M24 10.304c0-5.369-5.383-9.738-12-9.738-6.616 0-12 4.369-12 9.738 0 4.819 4.588 8.857 10.778 9.623.421.091.999.28 1.145.641.132.331.089.848.044 1.182-.132.611-.611 2.38-.611 2.38-.033.16-.066.26.088.33.154.07.275-.05.421-.111 1.893-.798 9.488-5.494 12.954-9.412 2.354-2.581 2.851-5.239 2.181-7.593z"></path>
          </svg>
        </a>
        
        <a href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}`}
          target="_blank"
          rel="noopener noreferrer"
          onClick={() => trackShare(resultType, 'facebook')}
          style={{
            backgroundColor: '#1877F2',
            color: 'white',
            width: '50px',
            height: '50px',
            borderRadius: '50%',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            textDecoration: 'none',
            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
          }}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path>
          </svg>
        </a>
      </div>
      
      <div style={{
        backgroundColor: '#EBF8FF',
        borderRadius: '12px',
        padding: '16px',
        marginBottom: '24px',
        border: '1px solid #BEE3F8',
        display: 'flex',
        alignItems: 'flex-start',
        gap: '12px'
      }}>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#3182CE" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="16" x2="12" y2="12"></line>
          <line x1="12" y1="8" x2="12.01" y2="8"></line>
        </svg>
        <div>
          <p style={{ margin: '0 0 8px 0', fontSize: '14px', color: '#2C5282', fontWeight: '600' }}>
            周りと比較することで新たな気づきが！
          </p>
          <p style={{ margin: 0, fontSize: '14px', color: '#2C5282' }}>
            異なるタイプの医療従事者が協力することで、より良いチーム医療が実現できます。周りの人とタイプを共有して、お互いの強みを活かしましょう。
          </p>
        </div>
      </div>
    </div>
  );
};

// メインの結果画面コンポーネント
const EnhancedResultScreen = ({ results, profession, postalCode, answers, onRestart }) => {
  const [activeTab, setActiveTab] = useState('summary');
  const [showContactForm, setShowContactForm] = useState(false);
  
  // useNavigateの使用
  const navigate = useNavigate();
  
  // コンポーネントマウント時の処理
  useEffect(() => {
    // ページトップへスクロール
    window.scrollTo({ top: 0, behavior: 'auto' });
  }, []);
  
  // 結果データがない場合の処理
  if (!results) {
    return (
      <div style={{ 
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        backgroundImage: `url(${process.env.PUBLIC_URL}/images/patterns/medical_pattern_light.png)`,
        backgroundSize: '400px',
        backgroundPosition: 'center',
        backgroundRepeat: 'repeat',
        backgroundColor: '#65A9E5',
        fontFamily: `'Inter', 'Noto Sans JP', sans-serif`
      }}>
        <div style={{
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          borderRadius: '16px',
          padding: '40px 30px',
          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.15)',
          textAlign: 'center',
          maxWidth: '450px',
          margin: '0 20px'
        }}>
          <h2 style={{ 
            color: '#1A6CBF', 
            fontSize: '28px', 
            fontWeight: '700',
            marginBottom: '16px'
          }}>診断結果が見つかりません</h2>
          <p style={{
            marginBottom: '24px',
            color: '#4B5563',
            fontSize: '16px'
          }}>診断を完了してからこの画面をご覧ください。</p>
          <button
            onClick={onRestart}
            style={{
              backgroundColor: '#1A6CBF',
              color: 'white',
              border: 'none',
              borderRadius: '32px',
              padding: '14px 36px',
              fontSize: '18px',
              fontWeight: '600',
              cursor: 'pointer',
              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.2)',
              transition: 'all 0.3s ease'
            }}
          >
            <span>はじめに戻る</span>
          </button>
        </div>
      </div>
    );
  }

  // タイプコードを取得して、新しいtypeDescriptionsからデータを取得
  const typeCode = results.type || '';
  const typeData = getTypeData(typeCode);
  
  const animalName = typeData?.animalName || 'フクロウ';
  const catchPhrase = typeData?.catchPhrase || '医療の架け橋';
  const oneLiner = typeData?.oneLiner || '医療のプロフェッショナルとして多様な強みを活かし、患者中心のケアを実現する';
  const animalExplanation = typeData?.animalExplanation || '';
  const typeCodeExplanation = getTypeCodeExplanation(typeCode);
  
  // 職種ごとの色設定
  const getProfessionColor = () => {
    switch (profession) {
      case '看護師':
        return '#3182CE'; // 青系
      case '薬剤師':
        return '#38A169'; // 緑系
      case 'リハビリ系':
        return '#DD6B20'; // オレンジ系
      case 'その他医療職':
        return '#805AD5'; // 紫系
      default:
        return '#1A6CBF'; // デフォルト青
    }
  };

  const professionColor = getProfessionColor();

  // タブ定義
  const tabs = [
    { id: 'summary', label: '特性と強み' },
    { id: 'growth', label: '成長と発展' },
    { id: 'interpersonal', label: '対人関係' },
    { id: 'environment', label: '職場環境' },
    { id: 'inspiration', label: 'インスピレーション' },
    { id: 'share', label: 'シェアする' }
  ];

  // タブ切り替え処理
  const handleTabChange = (tabId) => {
    setActiveTab(tabId);
  };

  // 問い合わせフォームを開く
  const handleOpenContactForm = () => {
    // コンタクト開始イベントのトラッキング
    trackContactStart(results.title || typeCode, profession);
    setShowContactForm(true);
  };

  // 問い合わせフォームを閉じる
  const handleCloseContactForm = () => {
    setShowContactForm(false);
  };

  // 診断やり直し処理
  const handleRestartClick = () => {
    // 診断やり直しイベントのトラッキング
    trackRestart(results.title || typeCode);
    
    if (typeof onRestart === 'function') {
      onRestart();
    }
  };

  // タブコンテンツのアニメーション設定
  const contentVariants = {
    initial: { opacity: 0 },
    animate: { opacity: 1, transition: { duration: 0.3 } },
    exit: { opacity: 0, transition: { duration: 0.2 } }
  };

  return (
    <div className="result-page" style={{ 
      fontFamily: `var(--font-sans)`,
      backgroundColor: 'var(--gray-50)',
      minHeight: '100vh'
    }}>
      {/* ヒーローセクション */}
      <section className="section is-accent-primary">
        <div className="container">
          <div className="header is-align-center">
            {/* プロフェッション badgeスタイル */}
            <div className="eyebrow" style={{ color: 'rgba(255, 255, 255, 0.9)' }}>
              {profession || '医療職'} 診断結果
            </div>
            
            {/* 動物アイコン */}
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.6, type: 'spring' }}
              className="result-avatar"
              style={{
                width: '160px',
                height: '160px',
                backgroundColor: 'rgba(255, 255, 255, 0.15)',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '0 auto var(--space-6)',
                backdropFilter: 'blur(10px)',
                border: '3px solid rgba(255, 255, 255, 0.3)'
              }}
            >
              <AnimalIcon type={typeCode} />
            </motion.div>
            
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3, duration: 0.6 }}
            >
              <h1 className="heading_h1" style={{ color: 'white', marginBottom: 'var(--space-4)' }}>
                あなたは『{animalName}型』
              </h1>
              
              <h2 className="heading_h3" style={{ 
                color: 'rgba(255, 255, 255, 0.9)',
                fontWeight: 400,
                marginBottom: 'var(--space-6)'
              }}>
                {catchPhrase}
              </h2>
              
              <p className="subheading" style={{ 
                color: 'rgba(255, 255, 255, 0.8)',
                maxWidth: '700px',
                margin: '0 auto var(--space-8)'
              }}>
                {oneLiner}
              </p>
              
              {/* CTAボタン */}
              <motion.button
                onClick={handleOpenContactForm}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="button"
                style={{
                  backgroundColor: 'white',
                  color: 'var(--primary-700)',
                  boxShadow: '0 8px 25px rgba(255, 255, 255, 0.3)'
                }}
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                </svg>
                完全無料で相談してみる
              </motion.button>
            </motion.div>
          </div>
        </div>
      </section>

      {/* メインコンテンツエリア */}
      <section className="section">
        <div className="container">
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ type: 'spring', stiffness: 400, damping: 24 }}
            className="card"
            style={{
              marginTop: '-60px',
              position: 'relative',
              zIndex: 1,
            }}
          >
            {/* レーダーチャートとタイプコード */}
            <div className="grid grid_2-col tablet-1-col gap-large margin-bottom_large">
              <div style={{ textAlign: 'center' }}>
                <h3 className="heading_h4 margin-bottom_medium">あなたの特性チャート</h3>
                <TypeRadarChart axisScores={results.axisScores} />
              </div>
              
              <div>
                {/* 動物の説明カード */}
                {animalExplanation && (
                  <div className="card" style={{ marginBottom: 'var(--space-6)' }}>
                    <h4 className="heading_h4">『{animalName}』について</h4>
                    <p className="paragraph_large">{animalExplanation}</p>
                  </div>
                )}
                
                {/* タイプコード情報カード */}
                <div className="card" style={{ 
                  background: 'linear-gradient(135deg, var(--primary-50), rgba(255, 255, 255, 0.8))',
                  borderColor: 'var(--primary-200)'
                }}>
                  <h4 className="heading_h4" style={{ color: 'var(--primary-700)' }}>
                    あなたのタイプ: <span style={{ color: professionColor }}>{typeCode}型</span>
                  </h4>
                  <p className="paragraph_large" style={{ marginBottom: 'var(--space-4)' }}>
                    {typeCodeExplanation}
                  </p>
                  
                  {/* 実用的なメリット表示 */}
                  {typeData?.practicalBenefits && typeData.practicalBenefits.length > 0 && (
                    <div className="card" style={{
                      background: 'var(--success)',
                      color: 'white',
                      marginTop: 'var(--space-4)'
                    }}>
                      <h5 className="heading_h4" style={{ color: 'white', marginBottom: 'var(--space-3)' }}>
                        📋 相談すると分かること
                      </h5>
                      <ul style={{ margin: 0, paddingLeft: '20px' }}>
                        {typeData.practicalBenefits.slice(0, 3).map((benefit, index) => (
                          <li key={index} className="paragraph_small" style={{ 
                            marginBottom: 'var(--space-2)', 
                            color: 'white'
                          }}>
                            {benefit}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* タブナビゲーション */}
            <div className="tabs flex_horizontal" style={{
              justifyContent: 'center',
              flexWrap: 'wrap',
              marginBottom: 'var(--space-12)'
            }}>
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={(e) => {
                    e.preventDefault();
                    handleTabChange(tab.id);
                  }}
                  className={`tab ${activeTab === tab.id ? 'active' : ''}`}
                >
                  {tab.label}
                </button>
          ))}
        </div>

              {/* タブコンテンツ */}
              <div className="tab-content">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={activeTab}
                    variants={contentVariants}
                    initial="initial"
                    animate="animate"
                    exit="exit"
                  >
                    {activeTab === 'share' ? (
                      <ShareSection 
                        resultType={results.title || typeCode} 
                        profession={profession}
                      />
                    ) : (
                      <ResultSummary 
                        result={results} 
                        tab={activeTab} 
                        profession={profession} 
                      />
                    )}
                  </motion.div>
                </AnimatePresence>
              </div>

              {/* アクションボタン */}
              <div className="flex_horizontal" style={{
                justifyContent: 'center',
                gap: 'var(--space-4)',
                marginTop: 'var(--space-8)'
              }}>
                <button
                  onClick={handleOpenContactForm}
                  className="button"
                  style={{
                    backgroundColor: professionColor,
                    color: 'white'
                  }}
                >
                  無料でキャリア相談をする
                </button>
                
                <button
                  onClick={handleRestartClick}
                  className="button is-secondary"
                  style={{
                    borderColor: professionColor,
                    color: professionColor
                  }}
                >
                  診断をやり直す
                </button>
              </div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* 追従ボタン */}
      <div style={{
        position: 'fixed',
        bottom: '30px',
        right: '20px',
        zIndex: 100
      }}>
        <motion.button
          onClick={handleOpenContactForm}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          style={{
            backgroundColor: professionColor,
            color: 'white',
            border: 'none',
            borderRadius: '50px',
            padding: '14px 24px',
            fontSize: '16px',
            fontWeight: '600',
            cursor: 'pointer',
            boxShadow: '0 6px 16px rgba(0, 0, 0, 0.2)',
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
          }}
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
          </svg>
          <span>相談する</span>
        </motion.button>
      </div>

      {/* 予約フォームモーダル */}
      {showContactForm && (
        <QuickConsultationForm 
          resultType={results.title || typeCode}
          profession={profession}
          postalCode={postalCode}
          onClose={handleCloseContactForm}
        />
      )}

      {/* モバイル対応のためのスタイル */}
      <style jsx="true">{`
        /* モバイル表示（480px以下）用のスタイル */
        @media (max-width: 480px) {
          .header-section {
            padding: 30px 15px 60px !important;
          }
          
          .result-title {
            font-size: 24px !important;
            margin-bottom: 12px !important;
          }
          
          .result-description {
            font-size: 15px !important;
            line-height: 1.5 !important;
            margin-bottom: 20px !important;
          }
          
          .tabs-container {
            display: grid !important;
            grid-template-columns: repeat(2, 1fr) !important;
            grid-template-rows: repeat(3, auto) !important;
            gap: 8px !important;
            padding: 8px !important;
          }
          
          .tabs-container button {
            font-size: 13px !important;
            padding: 8px 12px !important;
            min-width: auto !important;
          }
          
          .action-buttons {
            margin-top: 20px !important;
            marginBottom: '20px',
            padding-bottom: 80px !important;
          }
          
          .action-buttons button {
            font-size: 15px !important;
            padding: 12px !important;
          }
          
          .floating-button {
            bottom: 15px !important;
            right: 15px !important;
          }
          
          .floating-button button {
            padding: 10px 16px !important;
            font-size: 14px !important;
          }
        }
        
        /* タブレット表示（481px〜768px）用のスタイル */
        @media (min-width: 481px) and (max-width: 768px) {
          .header-section {
            padding: 40px 20px 70px !important;
          }
          
          .result-title {
            font-size: 26px !important;
          }
          
          .tabs-container {
            grid-template-columns: repeat(3, 1fr) !important;
            grid-template-rows: repeat(2, auto) !important;
            gap: 10px !important;
          }
          
          .tabs-container button {
            font-size: 14px !important;
            padding: 10px 20px !important;
            min-width: auto !important;
          }
        }
        
        /* アニメーション */
        @keyframes pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.05); }
          100% { transform: scale(1); }
        }
      `}</style>
    </div>
  );
};

export default EnhancedResultScreen;